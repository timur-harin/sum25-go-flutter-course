name: Lab 01 Tests

on:
  pull_request:
    paths:
      - 'labs/lab01/**'
      - '.github/workflows/lab01-tests.yml'

jobs:
  test:
    name: Run Lab 01 Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1'
          
      - name: Install Go dependencies
        run: |
          cd labs/lab01/backend
          if [ ! -f go.mod ]; then
            go mod init lab01
          fi
          go mod tidy
          
      - name: Install Flutter dependencies
        run: |
          cd labs/lab01/frontend
          flutter pub get
          
      - name: Run Go tests
        id: go-tests
        run: |
          cd labs/lab01/backend
          # Run tests for each package and capture results
          echo "calculator_passed=false" >> $GITHUB_OUTPUT
          echo "user_passed=false" >> $GITHUB_OUTPUT
          echo "taskmanager_passed=false" >> $GITHUB_OUTPUT
          
          if go test ./calculator/...; then
            echo "calculator_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./user/...; then
            echo "user_passed=true" >> $GITHUB_OUTPUT
          fi
          if go test ./taskmanager/...; then
            echo "taskmanager_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Run Flutter tests
        id: flutter-tests
        run: |
          cd labs/lab01/frontend
          echo "profile_passed=false" >> $GITHUB_OUTPUT
          echo "counter_passed=false" >> $GITHUB_OUTPUT
          echo "registration_passed=false" >> $GITHUB_OUTPUT
          
          if flutter test test/profile_card_test.dart; then
            echo "profile_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/counter_app_test.dart; then
            echo "counter_passed=true" >> $GITHUB_OUTPUT
          fi
          if flutter test test/registration_form_test.dart; then
            echo "registration_passed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Calculate score
        id: score
        shell: bash
        run: |
          TOTAL=0
          [[ "${{ steps.go-tests.outputs.calculator_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          [[ "${{ steps.go-tests.outputs.user_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          [[ "${{ steps.go-tests.outputs.taskmanager_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          [[ "${{ steps.flutter-tests.outputs.profile_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          [[ "${{ steps.flutter-tests.outputs.counter_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          [[ "${{ steps.flutter-tests.outputs.registration_passed }}" == "true" ]] && TOTAL=$((TOTAL + 1))
          echo "total=$TOTAL" >> "$GITHUB_OUTPUT"
          
      - name: Comment PR with score
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.score.outputs.total }};
            const maxScore = 6;
            const percentage = (score / maxScore) * 100;
            
            const results = {
              'Go Tasks': {
                'Calculator': ${{ steps.go-tests.outputs.calculator_passed }},
                'User Management': ${{ steps.go-tests.outputs.user_passed }},
                'Task Manager': ${{ steps.go-tests.outputs.taskmanager_passed }}
              },
              'Flutter Tasks': {
                'Profile Card': ${{ steps.flutter-tests.outputs.profile_passed }},
                'Counter App': ${{ steps.flutter-tests.outputs.counter_passed }},
                'Registration Form': ${{ steps.flutter-tests.outputs.registration_passed }}
              }
            };
            
            let comment = `## Lab 01 Test Results\n\n`;
            comment += `Score: ${score}/${maxScore} (${percentage}%)\n\n`;
            comment += `### Task Completion:\n\n`;
            
            for (const [category, tasks] of Object.entries(results)) {
              comment += `#### ${category}\n`;
              for (const [task, passed] of Object.entries(tasks)) {
                const status = passed ? '✅' : '❌';
                comment += `- ${status} ${task}\n`;
              }
              comment += '\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 