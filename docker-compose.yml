services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: course_postgres
    environment:
      POSTGRES_DB: coursedb
      POSTGRES_USER: courseuser
      POSTGRES_PASSWORD: coursepass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U courseuser -d coursedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: course_backend
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - DATABASE_URL=postgres://courseuser:coursepass@postgres:5432/coursedb?sslmode=disable
      - PORT=8080
      - JWT_SECRET=your-jwt-secret-key
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flutter Frontend (Web)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: course_frontend
    ports:
      - "3000:80"
    environment:
      - API_BASE_URL=http://localhost:8080
    depends_on:
      - backend

  # Redis for caching (optional for advanced labs)
  redis:
    image: redis:7-alpine
    container_name: course_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: course_nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
#    profiles:
#      - production # We can decide later if this should only be for a production profile

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: course_network 