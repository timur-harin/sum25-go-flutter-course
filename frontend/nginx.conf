events {
    worker_connections 1024;
}

http {
    # Define upstream for backend service
    upstream backend_service {
        server backend:8080; # Docker Compose will resolve 'backend' to the backend container
    }

    # Define upstream for frontend service
    # The 'frontend' service's internal Nginx listens on its port 80
    upstream frontend_service {
        server frontend:80; # Docker Compose will resolve 'frontend' to the frontend container
    }

    server {
        listen 80;
        server_name localhost;

        # Proxy API requests to the backend service
        location /api/ {
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy health check to the backend service
        location /health {
            proxy_pass http://backend_service;
            access_log off;
        }

        # Serve frontend application
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
} 